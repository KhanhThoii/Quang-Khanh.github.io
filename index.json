[
{
	"uri": "http://localhost:1313/",
	"title": "Deploying FCJ Management Application with Auto Scaling Group",
	"tags": [],
	"description": "",
	"content": "Deploying FCJ Management Application with Auto Scaling Group Overview In this tutorial, we will deploy the application with Auto Scaling Group to ensure flexible scalability, promptly responding to user access needs. At the same time, we will integrate Load Balancer to distribute traffic and coordinate requests from users to the application tier, helping to optimize performance and ensure system availability.\nBefore starting, make sure you have consulted the documentation on how to deploy FCJ Management Application on Windows or Amazon Linux virtual machines to understand the setup steps on the virtual machine. We will use the deployed FCJ Management virtual machines to perform automatic and simultaneous scaling in Auto Scaling Group.\nContents Introduction Preparation steps Initialize Template Set up Load Balancer Testing Initialize Auto Scaling Group Test manual scaling solution Clean up resources "
},
{
	"uri": "http://localhost:1313/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction In today’s information technology landscape, effective resource management and service stability are essential requirements for businesses. As the number of users increases, ensuring consistent system performance becomes a significant challenge. Therefore, the topic \u0026ldquo;Implementing Workload Management System with AWS\u0026rdquo; will focus on building a flexible and efficient resource management system by leveraging powerful AWS tools and services, such as Auto Scaling, Load Balancer, and CloudWatch.\nAuto Scaling Group What is Auto Scaling Group, and Why Use Auto Scaling Group?\nAuto Scaling Group (ASG) is an Amazon Web Services (AWS) service that automatically adjusts the number of servers (instances) based on the actual demand of the application. When traffic or usage demand increases, ASG can automatically create additional servers to maintain stable performance. Conversely, when demand decreases, ASG reduces the number of servers to save costs.\nKey Benefits of Auto Scaling Group:\nAutomatic Scalability: Increases or decreases the number of servers based on set conditions, such as CPU usage, memory, or the number of requests.\nCost Optimization: Automatically shuts down unnecessary servers when demand decreases, helping save resources.\nEnsures Availability: Maintains a minimum number of servers to ensure the system remains operational, even if some servers experience issues.\nElastic Load Balancer Elastic Load Balancer (ELB) is an Amazon Web Services (AWS) service used to automatically distribute incoming traffic across multiple servers (instances) in one or more Availability Zones. ELB ensures that requests are evenly distributed, preventing overload on any single server, thereby optimizing performance and increasing the application\u0026rsquo;s availability.\nLaunch Template Launch Template is a tool in Amazon Web Services (AWS) that simplifies and automates the creation of virtual servers (EC2 instances) by storing initialization configurations. By using Launch Template, you don’t need to manually configure each time a new instance is created, saving time and ensuring consistency.\nTarget Group Target Group is a component of the Elastic Load Balancer (ELB) used to define and manage the EC2 instances that the Load Balancer will distribute traffic to.\n"
},
{
	"uri": "http://localhost:1313/2-prerequiste/2.1-setup-network-infrastructure/",
	"title": "Network Infrastructure Setup",
	"tags": [],
	"description": "",
	"content": "Create VPC Go to AWS Management Console\nFind VPC Select VPC In the VPC interface\nselect Create VPC In the Create VPC interface\nSelect VPC and more Name, enter your VPC name. In this lab, we name it WorkShop IPv4 CIDR block, enter 10.0.0.0/16 Select as follows:\nNumber of AZs is 3 Number of public subnets is 3 Number of private subnets is 3 Nat gateways select None VPC endpoints select None Select Create VPC Perform public IP allocation. Perform public IP allocation.\nSelect Subnets Select public subnet Select Edit subnet settings Select Enable auto-assign public IPv4 address. Then Select Save\nCheck that the assignment was successful.\nPerform the assignment for the remaining Public subnet (do the same). Next, we will create a Security group for the application.\nIn the VPC interface, select Security groups\nSelect Create security group\nConfigure Security Group\nSecurity group name, enter FCJ-Management-SG Description, enter Security Group for FCJ Management VPC, then select the newly created VPC: WorkShop Configure Inbound rules\nFirst, configure SSH port 22 and Source: MyIP to be able to access the instance. Next is HTTP port 80. Custom TCP port 5000 for FCJ Management HTTPS port 443. Check Outbound rules and select Create security group\nCreate Security group for Database instance We create Security group for Database instance. To ensure security, do not configure the general Security group of the application. Configure security group\nSecurity Group name, enter FCJ-Management-DB-SG Description, enter Security Group for DB instance Select the newly created vpc Configure Inbound rules Select Add rule Select MYSQL/Aurora port 3306 Then select Source as FCJ-Management-SG Check the Outbound rules again and finally click Create security group\n"
},
{
	"uri": "http://localhost:1313/2-prerequiste/",
	"title": "Preparation steps",
	"tags": [],
	"description": "",
	"content": "We need to prepare some services to be able to deploy the FCJ Management application using Auto Scaling Group with Elastic Load Balancer. In general, we will deploy the FCJ Management application according to the following architecture:\nContent Set up network infrastructure Initialize EC2 Instance Initialize Database Instance with RDS Set up data for Database Deploy web server Prepare metrics for Predictive scaling "
},
{
	"uri": "http://localhost:1313/3-create-launch-template/",
	"title": "Create Launch Template",
	"tags": [],
	"description": "",
	"content": "AMIs and Launch Templates AMIs (Amazon Machine Images) store important information such as the operating system, applications, and configuration of an EC2 instance. When you create an AMI, you ensure that each new server you create has the same configuration and is ready to go right away.\nA Launch Template is a tool used to configure new EC2 instances, including choosing the AMI, instance type, network configuration, and security options. When you need to create one or more servers with the same configuration, simply use a pre-configured Launch Template for quick and easy deployment.\nSet up Launch Templates Create Amazon Machine Images (AMIs) from EC2 In the EC2 management interface, in the right panel\nSelect Instances Select FCJ-Management instance Select Actions Select Image and templates Click Create image In the configuration table for Create AMI, we proceed to fill in the following information\nImage name FCJ-Management-AMI Image description AMI for FCJ-Management Click Create Image After creating the AMI, we will check the AMI just created\nSelect AMIs we will see the AMI just created Select FCJ-Management-AMI Create Launch Templates In the EC2 management interface, in the right panel\nSelect Launch Templates Select Create launch template In the Create launch template panel, fill in the following information\nIn the Launch template name and description section\nLaunch template name FCJ-Management-template\nTemplate version description Template for FCJ Management\nIn the Application and OS Image (Amazon Machine Image) section\nSelect My AMIs\nSelect Owned by me\nSelect the type Amazon Machine Image (AMI), select the AMI created FCJ-Management-AMI\nIn the Instance type section\nSelect the type Instance t2.micro\nIn the Key pair (logical) section\nSelect the Key pair name named fcj-key1\nNetwork settings\nSelect the public subnet AutoScaling-Lab-public-ap-southeast-1a\nSelect Select existing security group\nSelect the security group FCJ-Management-SG\nFinally, select Create launch template\nConclusion result Check the Launch Template just created\nSelect FCJ-Management-template Review the Launch Template configuration we created Complete the creation of the Launch Template.\n"
},
{
	"uri": "http://localhost:1313/4-setting-up-load-balancer/4.1-t%E1%BA%A1o-target-group/",
	"title": "Create Target Group",
	"tags": [],
	"description": "",
	"content": "Create Target Group In the EC2 interface, on the left panel\nSelect Target Group Click the Create target group button The Specify group details table appears\nIn the Basic configuration section\nChoose a target types Instances\nTarget group name FCJ-Management-TG\nIn the Basic configuration section\nProtocol : port HTTP, 5000\nIP address IPv4\nVPC WorkShop\nProtocol version HTTP1\nClick Next Next we proceed to Register target\nIn the Available instance section\nSelect the target group FCJ-Management-TG\nPorts for the selected instances 5000\nSelect Include as pending below\nIn the Review targets section\nWe will see the previously registered target group\nSelect Create target group\nResult Complete creating the Target Group, select the newly created Target Group FCJ-Management-TG to view the information believe. "
},
{
	"uri": "http://localhost:1313/2-prerequiste/2.2-launch-ec2-instance/",
	"title": "Initialize EC2 Instance",
	"tags": [],
	"description": "",
	"content": "Go to AWS Management Console\nSearch for EC2 Select EC2 In the EC2 interface\nselect Launch instances Name the instance, enter FCJ-Management\nSelect Quick Start Select Amazon Linux Select as after:\nSelect Amazon Linux 2023 AMI Select t2.micro Select Key pair (login):\nSelect Create new key pair Configure key pair\nName it fcj-key1 Key pair type: RSA Private key format: .pem Click Create key pair Perform Network configuration:\nClick Edit\nVPC, select the created VPC.\nSubnet, select Public subnet\nCheck if Auto-assign public IP has been set? If not, review the public IP allocation step in the VPC creation step.\nSelect Select existing security group then select FCJ-Management-SG.\nSelect Launch instance.\nInstance initialization successful.\n"
},
{
	"uri": "http://localhost:1313/4-setting-up-load-balancer/4.2-t%E1%BA%A1o-target-group/",
	"title": "Create Load Balancer",
	"tags": [],
	"description": "",
	"content": "Create Load Balancer In the EC2 interface, on the left panel\nSelect Load Balancers Click the Create Load Balancer button The Compare and select load balancer type table appears\nIn the Load balancer types section In the Application Load Balancer section Select Create We will see the Create Application Load Balancer table appear\nIn the Basic configuration section Load balancer name FCJ-Management-LB Scheme Internet-facing - Load balancer IP address type IPv4 In the Network mapping section - Select VPC AutoScaling-Lab - Select Subnet Public ap-southeast-1a, ap-southeast-1b, ap-southeast-1c. Note: Select public subnet In the Security groups section\nSecurity groups FCJ-Management-SG\nIn the Listeners and routing section\nDefault action FCJ-Management-TG\nClick on the Create Balancer button Result After creating the Load Balancer, we select FCJ-Management-LB to view the information Select Resource map - new to view the Load Balancer\u0026rsquo;s link overview "
},
{
	"uri": "http://localhost:1313/2-prerequiste/2.3-launch-a-database-instance-with-rds/",
	"title": "Initialize Database Instance with RDS",
	"tags": [],
	"description": "",
	"content": "Create Subnet group for Database instance Go to AWS Management Console\nFind RDS Select RDS Select Subnet groups Select Create DB subnet group In the Create DB subnet group interface\nName, enter FCJ-Management-Subnet-Group Description, enter Subnet Group for FCJ Management Select VPC created. Subnet configuration\nSelect AZ Select Private subnet Select Create Complete DB Subnet Group creation with 2 AZs\nCreate Database instance Access RDS AWS Management Console\nSelect Databases Select Create database Select the method to create Databases as follows:\nSelect Standard create Engine database select MySQL Template\nSelect Production Select Mutil-AZ DB instance Perform detailed settings\nDB instance identifier, enter fcj-management-db-instance Master username, enter admin Select to Self managed Master password, enter your choice (enter 06022003Min*) - Confirm password, re-enter password 1 more time\nDetailed configuration for instance\nSelect db.m5d.large Select General Purpose SSD (gp3) Allocated storage enter 20\nConnectivity for db instance\nSelect Don’t connect to an EC2 compute resouce VPC, select WorkShop created Subnet group, select the subnet group created. VPC security group, Select Choose existing Security Group, select FCJ-Management-DB-SG Initialize Initial Database with name awsfcjuser, leave the rest as default.\nSelect Create database\nWait a few minutes for the Database instance to be initialized\nWe get the Endpoint and Port as below.\n"
},
{
	"uri": "http://localhost:1313/4-setting-up-load-balancer/",
	"title": "Setting Up Load Balancer",
	"tags": [],
	"description": "",
	"content": "Load Balancer Load Balancer plays an important role in ensuring the availability and scalability of your application. It distributes traffic evenly to multiple targets, such as EC2 instances, containers, or IP addresses. Thanks to this, the system not only utilizes resources efficiently but also improves performance and enhances fault tolerance, helping the application operate stably and meet the needs of users.\nContent Create Target Group Create Load Balancer "
},
{
	"uri": "http://localhost:1313/5-test/",
	"title": "Check the result",
	"tags": [],
	"description": "",
	"content": "Check the result After deploying the Load Balancer, we will get the DNS name of this LB and paste it into the browser to test the deployment result.\nResults\nNow we do some operations to see if the system is working properly\nChange the information of 1 Record\nSelect the Records you want to change\nWhen you finish entering, click submit Return to the home page to see the results Add 1 Record to the list Select Add new users\nEnter the necessary information and click submit Return to home page to see results "
},
{
	"uri": "http://localhost:1313/2-prerequiste/2.4-setup-data-for-database/",
	"title": "Database Settings",
	"tags": [],
	"description": "",
	"content": "Get Public IP address of EC2 instance\nUse MobaXterm to SSH into the instance via port 22.\nSelect Session\nSelect SSH\nRemote host, enter the newly obtained Public IPv4 address of the instance\nSpecify username, enter ec2-user\nCheck port 22\nSelect Advanced SSH settings\nSelect Use private key and select the keypair of the instance.\nSelect OK\nSSH successful\nBecause we use git to clone the source code. First, install git with the following command:\nsudo yum install git Install MySQL command-line client\nsudo dnf install mariadb105 Check git installation\nmysql --version Connect MySQL command-line client (unencrypted)\nFor the -h parameter, replace the DNS name (endpoint) for the DB instance, you can get the DNS name in the detailed console of the RDS you created - For the -P parameter, replace the port for the DB instance. (3306) For the -u parameter, replace it with the master user you created when you created RDS After running the command, enter the master user password that you set when you created RDS mysql -h fcj-management-db-instance.cfc4i6gyseay.ap-southeast-1.rds.amazonaws.com -P 3306 -u admin -p Check the databases in the instance with the following command, which will print out a list of all databases.\nshow databases; Select the database to make changes to using USE, use the initial database when you created RDS.\nUSE \u0026#34;database name\u0026#34;; ``` Create a table in the awsuser database using the **CREATE TABLE** command. ```bash CREATE TABLE `awsfcjuser`.`user` ( `id` INT NOT NULL AUTO_INCREMENT , `first_name` VARCHAR(45) NOT NULL , `last_name` VARCHAR(45) NOT NULL , `email` VARCHAR(45) NOT NULL , `phone` VARCHAR(45) NOT NULL , `comments` TEXT NOT NULL , `status` VARCHAR(1 0) NOT NULL DEFAULT \u0026#39;active\u0026#39; , PRIMARY KEY (`id`)) ENGINE = InnoDB; Insert information into the data table using the INSERT INTO command\nINSERT INTO `user` (`id`, `first_name`, `last_name`, `email`, `phone`, `comments`, `status`) VALUES (NULL, \u0026#39;Amanda\u0026#39;, \u0026#39;Nunes\u0026#39;, \u0026#39;anunes@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Alexander\u0026#39;, \u0026#39;Volkanovski\u0026#39;, \u0026#39;avolkanovski@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Khabib\u0026#39;, \u0026#39;Nurmagomedov\u0026#39;, \u0026#39;knurmagomedov@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Kamaru\u0026#39;, \u0026#39;Usman\u0026#39;, \u0026#39;kusman@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Israel\u0026#39;, \u0026#39;Adesanya\u0026#39;, \u0026#39;iadesanya@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Henry\u0026#39;, \u0026#39;Cejudo\u0026#39;, \u0026#39;hcejudo@ufc.com \u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Valentina\u0026#39;, \u0026#39;Shevchenko\u0026#39;, \u0026#39;vshevchenko@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Tyron\u0026#39;, \u0026#39;Woodley\u0026#39;, \u0026#39;twoodley@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Rose\u0026#39;, \u0026#39;Namajunas \u0026#39;, \u0026#39;rnamajunas@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Tony\u0026#39;, \u0026#39;Ferguson \u0026#39;, \u0026#39;tferguson@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Jorge\u0026#39; , \u0026#39;Masvidal \u0026#39;, \u0026#39;jmasvidal@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Nate\u0026#39;, \u0026#39;Diaz \u0026#39;, \u0026#39;ndiaz@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Conor\u0026#39;, \u0026#39;McGregor \u0026#39;, \u0026#39;cmcGregor@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Cris\u0026#39;, \u0026#39;Cyborg \u0026#39;, \u0026#39;ccyborg@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Tecia\u0026#39;, \u0026#39;Torres \u0026#39;, \u0026#39;ttorres@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL , \u0026#39;Ronda\u0026#39;, \u0026#39;Rousey \u0026#39;, \u0026#39;rrousey@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Holly\u0026#39;, \u0026#39;Holm \u0026#39;, \u0026#39;hholm@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Joanna\u0026#39;, \u0026#39;Jedrzejczyk \u0026#39;, \u0026#39;jjedrzejczyk@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;); Display the tables:\nSELECT * FROM \u0026#34;table name\u0026#34;; Use exit to leave. If you cannot disconnect from the DB instance\n"
},
{
	"uri": "http://localhost:1313/6-create-auto-scaling-group/",
	"title": "Create Auto Scaling Group",
	"tags": [],
	"description": "",
	"content": "Problem in the previous section As we tested in the previous section, our website was operating normally with a number of incoming requests. What if we send a lot of requests at the same time? Our website will no longer operate stably and the solution is that we will have to increase more EC2 Instances in the system and rely on Load Balancer to share requests from users.\nHowever, it is not reasonable for us to just sit and wait and add EC2 servers because to initialize an EC2 Instance, we need to have the \u0026ldquo;core\u0026rdquo; inside, which is the application that is in charge of processing those requests and along with other libraries.\nSet up Auto Scaling Group Set up Launch template In the EC2 management interface, drag the left menu down to the bottom.\nSelect Auto Scaling Groups.\nClick Create Auto Scaling group.\nIn the interface to create Auto Scaling group, we will fill in the following information\nName: FCJ-Management-ASG\nIn Launch template:\nLaunch template: select FCJ-Management-template (can be any name).\nVersion: Default (1) according to the default selection.\nNote that the name of the ASG you should set is the same as the name of the ASG that was set in the previous section 2.6, the step of preparing data for Predictive Scaling.\nThe launch template selected for the ASG must be a template that has fully installed MySQL Client, Node, Source Code and PM2 to ensure that the Targets work properly. If you follow the steps in section 2 and section 3, you have done it correctly.\nNetwork settings In the Network section, select the following information:\nVPC: select VPC WorkShop, the VPC we created at the beginning of the article.\nAvailability Zones and subnets: select the 3 public subnets that we created.\nClick Next.\nLoad Balancer settings and some other things In step 4, we have created Application Load Balancer and created a Target Group and attached it to that load balancer. So now we will select some options as follows:\nLoad balancing: select Attach to an existing load balancer.\nAttach to an existing load balancer: select Choose from your load balancer target group\nExisting load balancer target group: select FCJ-Management-TG | HTTP.\nIn the VPC Lattice integration options section: select No VPC Lattice service, in this article we do not configure this section.\nWhen the Target Group and Application Load Balancer are configured correctly, in the Existing load balancer target group option we can see that Target Group is listed, meaning that both ALB and TG exist.\nNext is Health checks, we will select (check) Turn on Elastic Load Balancing health checks. Leave the remaining settings as default.\nAdditional settings, in the Monitoring section:\nSelect (check) Enable group metrics collection within CloudWatch.\nClick Next.\nSet Size and Scaling for Group In this section, I will determine the scaling behavior of the Group and the number of Instances that will be initialized during the Scaling process, including Scale out (expand) and Scale in (shrink).\nIn the Group size section: Desired capacity: 1 In the Scaling section: Scaling limits: Min desired capacity: 1 Max desired capacity: 3 (depending on the number of servers you want) In Automatic scaling - optional: select No scaling policies, temporarily I will not set a scaling policy for ASG.\nIn Instance maintenace policy: select No policy, then click next.\nSet up notifications We will set up notifications to email (using Amazon SNS) when ASG:\nInitialize a new Instance.\nDestroy an Instance.\nFail to initialize an Instance.\nFail to destroy an instance.\nWe will only create notifications to a single email, including the following information:\nSend a notification to: asg-topic. I will choose a topic to send.\nWith these recipients: enter the email you want SNS to send to.\nEvent types: select all.\nClick Next.\nConfirm the information and Create Auto Scaling group.\nResult Check and register to receive emails from the topic.\nGo to the Activity tab of ASG FCJ-Management-ASG to check\n"
},
{
	"uri": "http://localhost:1313/2-prerequiste/2.5-deploy-web-server/",
	"title": "Deploy Web Server",
	"tags": [],
	"description": "",
	"content": "Install Node Version Manager (nvm)\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash Reload Profile\nsource ~/.bash_profile Use nvm to install Node.js by entering the following into the command line.\nnvm install 20 clone application code repository\ngit clone https://github.com/First-Cloud-Journey/000004-EC2.git Go to the lab directory\ncd 000004-EC2 View the directories in the web and Use npm init to initialize the project, which will create a sample package.json file.\nls npm i Install pm2 in Global, PM2 is used to manage and monitor running Node.js applications. It allows applications to run in the background. Check the version\nnpm install -g pm2 pm2 --version We redefine the script to run the application, we will use vim to open the pakage.json file, in the scripts section in the start key, assign it the following value, this will help our application run in the background:\npm2 start app.js Continue using vim to enter the .env file, then enter the following content to establish a connection to the database.\nDB_HOST=\u0026#39;your db_host\u0026#39; DB_NAME=\u0026#39;awsfcjuser\u0026#39; DB_USER=\u0026#39;admin\u0026#39; DB_PASS=\u0026#39;password created in step 2.3\u0026#39; Launch the application:\nnpm start npm status Check the Log to make sure the application is working properly\nnpm log Next, we need to get the public DNS of the instance to be able to access the application from the browser.\nThe application is running\nNext we use the pm2 startup command to configure PM2 to automatically restart applications when the server reboots. It will ask for the Startup Script setup, copy/paste that command and run it.\nRun the pm2 save command to save the current state of the processes to the startup list.\n"
},
{
	"uri": "http://localhost:1313/2-prerequiste/2.6-prepare-metric-for-predictive-scaling/",
	"title": "Preparing metrics for Predictive scaling",
	"tags": [],
	"description": "",
	"content": "Preparing data for Predictive scaling Because Predictive scaling requires a large amount of data over more than 2 days to be able to make predictions for the following days, and here we do not have that data, we will need to prepare to simulate an environment\nPreparation steps First, we will create a new folder named metric-preparation and move it into this folder\nmkdir metric-preparation \u0026amp;\u0026amp; cd metric-preparation Then download the script to prepare the data\ncurl -o prepare-metric-data.sh https://raw.githubusercontent.com/awslabs/ec2-spot-workshops/master/workshops/efficient-and-resilient-ec2-auto-scaling/prepare-metric-data.sh After downloading, go inside to change the command section in the script\nvim prepare-metric-data.sh #!/bin/bash set -e file=$1 group=$2 echo \u0026#34;=== Format metric file ===\u0026#34; echo $file echo $group l=$(jq length $file) i=0 while [ $i -lt $l ] do time=$(date -d \u0026#34;$[5*$i] minutes ago\u0026#34;) cat $file | jq --argjson i $i --arg t \u0026#34;$time\u0026#34; \u0026#39;.[$i].Timestamp |= $t\u0026#39; \u0026gt; tmp.json \u0026amp;\u0026amp; mv tmp.json $file i=$[$i+1] done echo \u0026#34;replace autoscaling group name..\u0026#34; sed -i $file -e \u0026#34;s/#ASGPLACEHOLDER#/$group/g\u0026#34; echo \u0026#34;=== Complete ===\u0026#34; After editing, we now proceed to load the unprocessed data, first the metrics for the instances.\ncurl -o metric-instances.json https://raw.githubusercontent.com/awslabs/ec2-spot-workshops/master/workshops/efficient-and-resilient-ec2-auto-scaling/metric-instances.json CPU Data\ncurl -o metric-cpu.json https://raw.githubusercontent.com/awslabs/ec2-spot-workshops/master/workshops/efficient-and-resilient-ec2-auto-scaling/metric-cpu.json Modify these two data types in turn, first for the CPU\nbash prepare-metric-data.sh metric-cpu.json FCJ-Management-ASG \u0026amp;\u0026amp; cat metric-cpu.json Instances\nbash prepare-metric-data.sh metric-instances.json FCJ-Management-ASG \u0026amp;\u0026amp; cat metric-instances.json 💡 Note In the 2 commands above, the parameter FCJ-Management-ASG appears, which is the name of the Auto Scaling Group that we will create later, so later you will need to create an ASG with the same name. Otherwise, you should change to another name from now on.\nUpload data to CloudWatch In Amazon Linux 2023, and using the correct AMI, AWS CLI is already installed inside, at this time we just need to take it out to reconfigure the credentials. Remember that you must have an IAM User with enough permissions to upload data to CloudWatch or at least enough permissions to do this workshop.\nGo to the IAM page, enter the IAM User information and enter the Access Key Id and Serect Access Key\naws configure Configure\nThen upload the 2 data files that we have prepared earlier to CloudWatch\naws cloudwatch put-metric-data --namespace \u0026#39;FCJ Management Custom Metrics\u0026#39; --metric-data file://metric-cpu.json aws cloudwatch put-metric-data --namespace \u0026#39;FCJ Management Custom Metrics\u0026#39; --metric-data file://metric-instances.json Check Go to CloudWatch to check the results result\nFind CloudWatch Click to enter CloudWatch Console In the Console interface of CloudWatch\nSelect All metrics Select FCJ Management Custom Metrics Select AutoScalingGroupName\nSelect 2 more parameters as shown below, wait a while to receive the results.\n"
},
{
	"uri": "http://localhost:1313/7-test-solutions/",
	"title": "Testing manual scaling solutions",
	"tags": [],
	"description": "",
	"content": "Manual Scaling Manual Scaling is a method of manually managing resource scale in Auto Scaling Groups (ASGs) on AWS. Instead of letting the system automatically adjust the number of resources based on set conditions, you will decide when to add or remove the number of instances (virtual servers) in the group.\nInstall the test program Before going into testing, we need to load a test program to simulate the system under high traffic load. First, go to this link to download the test program: https://www.paessler.com/tools/webstress\nTest settings When the Auto Scaling Group is created, this service will automatically initialize an EC2 Instance that we configured earlier. To see this, we can go to EC2 Console\nSelect Load Balancer Select the Resource map - new tab Here we can see that the previous Target Group is linked to 2 Targets, which are 2 EC2 Instances (1 is the original instance created earlier; the other is the instance created from ASG).\nTest with the application that we downloaded earlier.\nOpen the application, click on the Test Type tab\nTest Type:\nSelect CLICKS\nRun until: 100000\nUser Simulation\nNumber Of Users: 1000\nClick Delay: 1 seconds\nIn the URLs tab, I will configure the information\nName: Manual Scaling Test, here you can set it to whatever, because we will use it to test in other types of scaling later.\nURL: copy the DNS of the Load Balancer and paste it in.\nStart by pressing Start Test\nRun the test Now go back to AWS Management Console, go to EC2 Console\nSelect 2 EC2 Instances in the target group Click on Monitoring tab and start observing In this section, we have 7 charts, but for now we are only interested in the following 5 charts:\nCPU Utilization (%): the chart shows the amount of CPU resources that these 2 instances have used in the range of less than 8% for each instance.\nNetwork in (bytes): the chart shows the network capacity going into these 2 instances in the range of less than 2.9 million Megabytes for each instance.\nNetwork out (bytes): the chart shows the network capacity going out from these 2 instances in the range of less than 17.3 million Megabytes for each instance.\nNetwork packets in (count): the graph shows the number of packets entering these 2 instances is around 6.85k packets per instance.\nNetwork packets out (count): the graph shows the number of packets leaving these 2 instances is around 7.36k packets per instance.\nFrom now on, we will read these graphs like this. Including important parameters in the vertical and horizontal columns and drawn lines. From here, we will understand more about how the Load Balancer balances network traffic to the instances in the Target Group.\nAnd if you only select 1 instance, then the graph will only have one drawn line representing that instance. Thus, the more you select on the list, the more lines will be displayed.\nManually adjust the ASG Desired capacity parameter Now we return to the ASG details page that we created earlier. In the Group details section, we can see that: Desired capacity = 1.\nNow we will assume a situation, that it is past peak hours so we want to turn off one instance to save costs. To do this, we will manually adjust the Desired capacity = 0 parameter. Click Edit.\nAdjust Desired capacity and Min desired capacity to 0 and click Update.\nThen go to the Activity tab to see what ASG is doing.\n=\u0026gt; So we can see that ASG will automatically destroy an instance according to the parameters it has configured.\nA few minutes later, go back to the Load Balancer information page, go to the Resource map - new tab and we can see that there is now only one target left.\nRETURN the test program.\nWe will also receive an email from SNS\nIt can be seen that the instance has now doubled the incoming and outgoing network traffic and the amount of CPU resources used is almost 4 times higher.\nConclusion In reality, the systems will have more complex and longer implementation steps, so they will use more CPU resources.\n"
},
{
	"uri": "http://localhost:1313/8-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "Clean up resources After completing the workshop, we proceed to the resource cleaning step\nDelete Auto Scaling Group In the EC2 management interface, in the left navigation bar, scroll down and select Auto Scaling Groups\nSelect Auto Scaling Groups FCJ-Management-ASG Click the Actions button in the upper right corner of the screen Select Delete Delete Load Balancer: In the EC2 management interface, in the left navigation bar, scroll down and select Load Balancer\nSelect Load Balancer FCJ-Management-LB Click the Actions button in the upper right corner of the screen Select Delete load balancer Delete Launch Template: In the EC2 management interface, on the left navigation bar, scroll down and select Launch Templates\nSelect Launch Templates CJ-Management-TG Click the Actions button in the upper right corner of the screen Select Delete template Delete Target Group: In the EC2 management interface, on the left navigation bar, scroll down and select Target Group\nSelect Target Group FCJ-Management-TG Click the Actions button in the upper right corner of the screen Select Delete Delete AMI: In the EC2 management interface, in the left navigation bar, scroll down and select AMIs\nSelect AMI FCJ-Management-AMI\nClick the Actions button in the upper right corner of the screen\nSelect Deregister AMI\nTerminate EC2 instance In the EC2 management interface, in the left navigation bar, select Instance\nSelect FCJ-Management instance\nClick the Instance state button in the upper right corner of the screen\nSelect Terminate (delete) instance\nDelete RDS Database Go to RDS On the left navigation bar, select Databases instance Select the database instance fcj-management-db-instance related to the lab. Click Modify. Modify DB Instance In the Modify DB Instance section, we scroll down to the bottom\nClick to remove Enable deletion protection Click Continue Schedule Modifications Continue in the Schedule modifications section\nSelect Apply immediately Click Modify DB instance Delete DB instance Select database instance fcj-management-db-instance Click the Actions button in the upper right corner of the screen Select Delete Select I acknowledge that upon instance deletion, automated, including system snapshots and point-in-time recovery, will no longer be available\nFill in delete me\nClick Delete\nDelete VPC Select VPC Select VPC WorkShop Select Delete ![clear11](/images/8.Clear/012Clear.p ng)\n"
},
{
	"uri": "http://localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]